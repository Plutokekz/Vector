name: Haskell CI
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**/*.hs'
      - 'lib/**/*.hs'
      - 'test/**/*.hs'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'app/**/*.hs'
      - 'lib/**/*.hs'
      - 'test/**/*.hs'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: '9.4'
          cabal-version: 'latest'
      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}
      - name: Build
        run: cabal build all
      - name: Run tests
        run: cabal test all
      - name: Package application
        run: |
          mkdir -p artifacts
          cabal install --installdir=artifacts/ --install-method=copy
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-binary
          path: artifacts/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Get git hash
        id: git_hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.git_hash.outputs.hash }}
          name: Release ${{ steps.git_hash.outputs.hash }}
          files: all-artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}